// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/transfer.proto

package transferv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gilwong00/file-streamer/internal/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransferServiceName is the fully-qualified name of the TransferService service.
	TransferServiceName = "transfer.v1.TransferService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransferServiceGetFileSizeProcedure is the fully-qualified name of the TransferService's
	// GetFileSize RPC.
	TransferServiceGetFileSizeProcedure = "/transfer.v1.TransferService/GetFileSize"
	// TransferServiceStreamFileProcedure is the fully-qualified name of the TransferService's
	// StreamFile RPC.
	TransferServiceStreamFileProcedure = "/transfer.v1.TransferService/StreamFile"
)

// TransferServiceClient is a client for the transfer.v1.TransferService service.
type TransferServiceClient interface {
	GetFileSize(context.Context, *connect.Request[v1.GetFileSizeRequest]) (*connect.Response[v1.GetFileSizeResponse], error)
	StreamFile(context.Context, *connect.Request[v1.StreamFileRequest]) (*connect.ServerStreamForClient[v1.StreamFileResponse], error)
}

// NewTransferServiceClient constructs a client for the transfer.v1.TransferService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransferServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransferServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transferServiceMethods := v1.File_proto_v1_transfer_proto.Services().ByName("TransferService").Methods()
	return &transferServiceClient{
		getFileSize: connect.NewClient[v1.GetFileSizeRequest, v1.GetFileSizeResponse](
			httpClient,
			baseURL+TransferServiceGetFileSizeProcedure,
			connect.WithSchema(transferServiceMethods.ByName("GetFileSize")),
			connect.WithClientOptions(opts...),
		),
		streamFile: connect.NewClient[v1.StreamFileRequest, v1.StreamFileResponse](
			httpClient,
			baseURL+TransferServiceStreamFileProcedure,
			connect.WithSchema(transferServiceMethods.ByName("StreamFile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transferServiceClient implements TransferServiceClient.
type transferServiceClient struct {
	getFileSize *connect.Client[v1.GetFileSizeRequest, v1.GetFileSizeResponse]
	streamFile  *connect.Client[v1.StreamFileRequest, v1.StreamFileResponse]
}

// GetFileSize calls transfer.v1.TransferService.GetFileSize.
func (c *transferServiceClient) GetFileSize(ctx context.Context, req *connect.Request[v1.GetFileSizeRequest]) (*connect.Response[v1.GetFileSizeResponse], error) {
	return c.getFileSize.CallUnary(ctx, req)
}

// StreamFile calls transfer.v1.TransferService.StreamFile.
func (c *transferServiceClient) StreamFile(ctx context.Context, req *connect.Request[v1.StreamFileRequest]) (*connect.ServerStreamForClient[v1.StreamFileResponse], error) {
	return c.streamFile.CallServerStream(ctx, req)
}

// TransferServiceHandler is an implementation of the transfer.v1.TransferService service.
type TransferServiceHandler interface {
	GetFileSize(context.Context, *connect.Request[v1.GetFileSizeRequest]) (*connect.Response[v1.GetFileSizeResponse], error)
	StreamFile(context.Context, *connect.Request[v1.StreamFileRequest], *connect.ServerStream[v1.StreamFileResponse]) error
}

// NewTransferServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransferServiceHandler(svc TransferServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transferServiceMethods := v1.File_proto_v1_transfer_proto.Services().ByName("TransferService").Methods()
	transferServiceGetFileSizeHandler := connect.NewUnaryHandler(
		TransferServiceGetFileSizeProcedure,
		svc.GetFileSize,
		connect.WithSchema(transferServiceMethods.ByName("GetFileSize")),
		connect.WithHandlerOptions(opts...),
	)
	transferServiceStreamFileHandler := connect.NewServerStreamHandler(
		TransferServiceStreamFileProcedure,
		svc.StreamFile,
		connect.WithSchema(transferServiceMethods.ByName("StreamFile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/transfer.v1.TransferService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransferServiceGetFileSizeProcedure:
			transferServiceGetFileSizeHandler.ServeHTTP(w, r)
		case TransferServiceStreamFileProcedure:
			transferServiceStreamFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransferServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransferServiceHandler struct{}

func (UnimplementedTransferServiceHandler) GetFileSize(context.Context, *connect.Request[v1.GetFileSizeRequest]) (*connect.Response[v1.GetFileSizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transfer.v1.TransferService.GetFileSize is not implemented"))
}

func (UnimplementedTransferServiceHandler) StreamFile(context.Context, *connect.Request[v1.StreamFileRequest], *connect.ServerStream[v1.StreamFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("transfer.v1.TransferService.StreamFile is not implemented"))
}
